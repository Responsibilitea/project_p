# ========================================<6> function =================================================================
# function 结构
# def 函数名([参数])：
#     函数体
#     [return xxx]
# ======================================================================================================================
# <6.1> creating function
# ----------------------------------------------------------------------------------------------------------------------
# 参数列表中num1，num2叫做形参
def add(num1, num2):
    result = num1 + num2
    return result


# ======================================================================================================================
# <6.2> call function
# ----------------------------------------------------------------------------------------------------------------------
# 调用add()函数时 传入的10,20称为实参
# 传参时如果没有明确指定，则按照顺序传参，10被传入了形参num1, 20被传入了num2，
num3 = add(10, 20)
print(num3)                                                 # result : 30

# 如果调用函数时，可以通过指明 关键字参数 来指定传入
num4 = add(num2=10, num1=20)
print(num4)                                                  # result : 30

# ======================================================================================================================
# <6.3> call function 内存解析
# python里一切皆为对象，在调用函数时，是将实参所指向的object的地址传给函数的形参，这样函数的形参也指向了实参所指向的object
# ----------------------------------------------------------------------------------------------------------------------


# ======================================================================================================================
# <6.4> function返回值
# 函数的返回值，如果是1个，则直接返回类型
# 函数的返回值，如果是多个，则返回结果为元组
# ----------------------------------------------------------------------------------------------------------------------
def fuc():
    return 'hello', 99


value = fuc()
print(value)                                                # result : ('hello', 99)


# ======================================================================================================================
# <6.5> function的形参可以设置默认值
# ----------------------------------------------------------------------------------------------------------------------
def function(a, b=10):
    print(a, b)


function(100)                                             # result : 100 10
function(100, 999)                                       # result : 100 999


# ======================================================================================================================
# <6.6> function的参数定义
# 函数可以设置个数可变得位置参数(函数只能设置一个*参数，此参数必须放在形参里的第一个)：
# 定义函数时，如果无法确定传递位置实参的个数时，可以使用可变的未知参数，使用*来定义个数可变的位置参数，结果为一个元组,
# 函数可以设置个数可变的关键字形参(函数只能设置一个**数)：
# 定义函数时，无法事先确定传递的关键字实参的个数时，使用可变的关键字形参，使用**来定义个数可变的关键字形参，结果为一个字典
# ----------------------------------------------------------------------------------------------------------------------
def function(*args):
    print(args, args[0])


function(10)                                             # result : (10,) 10
function(10, 20)                                         # result : (10, 20) 10
function(10, 20, 30)                                     # result : (10, 20, 30) 10


def function(**args):
    print(args)


function(a=10)                                          # result : {'a': 10}
function(a=10, b=20)                                    # result : {'a': 10, 'b': 20}
function(a=10, b=20, c=30)                              # result : {'a': 10, 'b': 20, 'c': 30}


# ======================================================================================================================
# <6.7> function的参数总结
# ----------------------------------------------------------------------------------------------------------------------
def function(a, b, c):              # a,b,c为形参
    print('a = ', a)
    print('b = ', b)
    print('c = ', c)


function(10, 20, 30)                # 函数调用时的参数传递，称谓位置传参

lst = [11, 22, 33]
function(*lst)                      # 通过加*，将列表的每一个元素转换为位置实参传入

function(a=100, c=300, b=200)      # 调用函数，通过关键字传参
dic = {'a': 111, 'b': 222, 'c': 333}
function(**dic)                     # 通过加**，将字典内的所有键值对转换为关键字实参传入函数


def func1(a, b=10):              # a为形参，b是默认值形参
    print('a = ', a)
    print('b = ', b)


def func2(*args):               # 个数可变得位置形参
    print(args)


def func3(**args):              # 个数可变得关键字形参
    print(args)


func2(10, 20, 30, 40)                           # result : (10, 20, 30, 40)
func3(a=11, b=22, c=33, d=44, e=55)             # result : {'a': 11, 'b': 22, 'c': 33, 'd': 44, 'e': 55}


def func4(a, b, *, c, d):       # 通过加入*，使*后的参数只能通过关键字实参传递
    print('a', a)
    print('b', b)
    print('c', c)
    print('d', d)
